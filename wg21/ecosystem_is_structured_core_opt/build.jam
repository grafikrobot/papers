#|
Copyright Ren√© Ferdinand Rivera Morell 2023
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
|#

import asciidoctor ;
import toolset ;

local name = ecosystem_is_structured_core_opt ;
local docn = P3335 ;
local docr = R2 ;
local xxxx = $(docn)$(docr) ;

project /wg21_$(name)
    :   requirements
        <cxxstd>20
    ;

path-constant CSS : ../../stylesheets ;

local samples ;
for local sample in [ glob sample*.cpp ]
{
    samples += [ run $(sample) ] ;
    explicit $(sample) ;
}
alias samples : $(samples) ;

html $(name)_$(xxxx).html : proposal.adoc
	:
		<dependency>samples
		<flags>--attribute=docnumber=$(docn)
		<flags>--attribute=revnumber=$(docn)$(docr)
		<flags>--attribute=stylesheet=$(CSS)/golo.css
		<flags>--attribute=rouge-style=base16.solarized
	;
install html : $(name)_$(xxxx).html : <location>. ;

_ = " " ;

toolset.flags json-validate FLAGS : <flags> ;
actions json-validate
{
	check-jsonschema -v --traceback-mode=full --schemafile$(_)"$(>[2])" "$(FLAGS)" "$(>[1])" && echo "passed" > "$(<)"
}

rule json-schema-check ( json schema ? : r * )
{
	return [ make $(json:B:S=.check) : $(json) $(schema)
		: @json-validate : $(r) ] ;
}

local validations ;
validations +=
	[ json-schema-check "std_opt_core-1.0.0.json"
		: <flags>--check-metaschema ] ;
for local json in [ glob test_success-*.json example-*.json ]
{
	validations += [ make $(json:B:S=.check)
		: $(json) std_opt_core-1.0.0.json
		: @json-validate ] ;
	explicit $(json:B:S=.check) ;
}
alias validate : $(validations) ;

toolset.flags asciidoctor-latexcore FLAGS : <flags> ;
actions asciidoctor-latexcore
{
	asciidoctor -o$(_)"$(<:D=)" -D$(_)"$(<:D)" $(FLAGS) "$(>)" --trace
}

for local wording in [ glob wording-*.adoc ]
{
	make $(name)_$(xxxx)_$(wording:B).tex
		: $(wording)
		: @asciidoctor-latexcore
		: <use>../../asciidoctor-latexcore//latexcore <location>.
		;
}
